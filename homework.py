import datetime
import json
import logging
import os
import time

import requests
import telegram
from dotenv import load_dotenv

load_dotenv()

PRACTICUM_TOKEN = os.getenv('PRACTICUM_TOKEN')
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
TELEGRAM_CHAT_ID = os.getenv('TELEGRAM_CHAT_ID')

RETRY_PERIOD = 600
ENDPOINT = 'https://practicum.yandex.ru/api/user_api/homework_statuses/'
HEADERS = {'Authorization': f'OAuth {PRACTICUM_TOKEN}'}


HOMEWORK_VERDICTS = {
    'approved': '‚úÖ –†–∞–±–æ—Ç–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞: —Ä–µ–≤—å—é–µ—Ä—É –≤—Å—ë –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å. –£—Ä–∞!',
    'reviewing': 'üîé –†–∞–±–æ—Ç–∞ –≤–∑—è—Ç–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É —Ä–µ–≤—å—é–µ—Ä–æ–º.',
    'rejected': '‚ö†Ô∏è –†–∞–±–æ—Ç–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞: —É —Ä–µ–≤—å—é–µ—Ä–∞ –µ—Å—Ç—å –∑–∞–º–µ—á–∞–Ω–∏—è.'
}

logging.basicConfig(
    level=logging.DEBUG,
    filename='program.log',
    filemode='w',
    format='%(asctime)s - %(levelname)s - %(message)s - %(name)s'
)
logger = logging.getLogger(__name__)
logger.addHandler(
    logging.StreamHandler()
)


class TheAnswerIsNot200Error(Exception):
    """–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ —Ä–∞–≤–µ–Ω 200."""


class EmptyDictionaryOrListError(Exception):
    """–ü—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å –∏–ª–∏ —Å–ø–∏—Å–æ–∫."""


class UndocumentedStatusError(Exception):
    """–ù–µ–¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å."""


class RequestExceptionError(Exception):
    """–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞."""


def check_tokens():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –≤—Å–µ —Ç–æ–∫–µ–Ω—ã.
    –ï—Å–ª–∏ –Ω–µ—Ç —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ, —Ç–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞.
    """
    no_tokens_msg = (
        '–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. '
        '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–∞–∫–æ–π-—Ç–æ –∏–∑ —Ç–æ–∫–µ–Ω–æ–≤.')
    logging.info(f'{no_tokens_msg}')
    return all([PRACTICUM_TOKEN, TELEGRAM_TOKEN, TELEGRAM_CHAT_ID])


def send_message(bot, message):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –¢–µ–ª–µ–≥—Ä–∞–º."""
    try:
        bot.send_message(TELEGRAM_CHAT_ID, message)
        logger.info(
            f'–°–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {message}')
    except telegram.TelegramError as telegram_error:
        logger.error(
            f'–°–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {telegram_error}')


def get_api_answer(url, current_timestamp):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å API YP."""
    current_timestamp = current_timestamp or int(time.time())
    headers = {'Authorization': f'OAuth {PRACTICUM_TOKEN}'}
    payload = {'from_date': current_timestamp}
    try:
        response = requests.get(url, headers=headers, params=payload)
        if response.status_code != 200:
            code_api_msg = (
                f'–≠–Ω–¥–ø–æ–∏–Ω—Ç {url} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.'
                f' –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞ API: {response.status_code}')
            logger.error(code_api_msg)
            raise TheAnswerIsNot200Error(code_api_msg)
        return response.json()
    except requests.exceptions.RequestException as request_error:
        code_api_msg = f'–ö–æ–¥ –æ—Ç–≤–µ—Ç–∞ API (RequestException): {request_error}'
        logger.error(code_api_msg)
        raise RequestExceptionError(code_api_msg) from request_error
    except json.JSONDecodeError as value_error:
        code_api_msg = f'–ö–æ–¥ –æ—Ç–≤–µ—Ç–∞ API (ValueError): {value_error}'
        logger.error(code_api_msg)
        raise json.JSONDecodeError(code_api_msg) from value_error


def check_response(response):
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ response."""
    if response.get('homeworks') is None:
        code_api_msg = (
            '–û—à–∏–±–∫–∞ –∫–ª—é—á–∞ homeworks –∏–ª–∏ response'
            '–∏–º–µ–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.')
        logger.error(code_api_msg)
        raise EmptyDictionaryOrListError(code_api_msg)
    if response['homeworks'] == []:
        return {}
    status = response['homeworks'][0].get('status')
    if status not in HOMEWORK_VERDICTS:
        code_api_msg = f'–û—à–∏–±–∫–∞ –Ω–µ –∑–∞–¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {status}'
        logger.error(code_api_msg)
        raise UndocumentedStatusError(code_api_msg)
    return response['homeworks'][0]


def parse_status(homework):
    """–ê–Ω–∞–ª–∏–∑ —Å—Ç–∞—Ç—É—Å–∞ –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è."""
    status = homework.get('status')
    homework_name = homework.get('homework_name')
    if status is None:
        extracted_from_parse_status(
            '–û—à–∏–±–∫–∞ –ø—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ status: ', status)
    if homework_name is None:
        extracted_from_parse_status(
            '–û—à–∏–±–∫–∞ –ø—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ homework_name: ', homework_name)
    verdict = HOMEWORK_VERDICTS[status]
    return f'–ò–∑–º–µ–Ω–∏–ª—Å—è —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã "{homework_name}". {verdict}'


def extracted_from_parse_status(arg0, arg1):
    """–í—ã–≤–æ–¥ –æ—à–∏–±–æ–∫ –ø–∞—Ä—Å–µ—Ä–∞."""
    code_api_msg = f'{arg0}{arg1}'
    logger.error(code_api_msg)
    raise UndocumentedStatusError(code_api_msg)


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    if not check_tokens():
        exit()
    bot = telegram.Bot(token=TELEGRAM_TOKEN)
    now = datetime.datetime.now()
    send_message(
        bot,
        f'–Ø –Ω–∞—á–∞–ª —Å–≤–æ—é —Ä–∞–±–æ—Ç—É: {now.strftime("%d-%m-%Y %H:%M")}')
    current_timestamp = int(time.time())
    tmp_status = 'reviewing'
    errors = True
    while True:
        try:
            response = get_api_answer(ENDPOINT, current_timestamp)
            homework = check_response(response)
            if homework and tmp_status != homework['status']:
                message = parse_status(homework)
                send_message(bot, message)
                tmp_status = homework['status']
            logger.info(
                '–ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç, —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç –ø—Ä–æ–≤–µ—Ä–∏–º API')
            time.sleep(RETRY_PERIOD)
        except Exception as error:
            message = f'–°–±–æ–π –≤ —Ä–∞–±–æ—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã: {error}'
            if errors:
                errors = False
                send_message(bot, message)
            logger.critical(message)
            time.sleep(RETRY_PERIOD)


if __name__ == '__main__':
    main()
